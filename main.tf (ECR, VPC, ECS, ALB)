provider "aws" {
  region = var.region
}

############################
# 1. ECR Repositories
############################

resource "aws_ecr_repository" "flask_repo" {
  name = "${var.project}-flask"
}

resource "aws_ecr_repository" "express_repo" {
  name = "${var.project}-express"
}

############################
# 2. VPC and Networking
############################

module "vpc" {
  source  = "terraform-aws-modules/vpc/aws"
  name    = "${var.project}-vpc"
  cidr    = "10.0.0.0/16"

  azs             = ["us-east-1a", "us-east-1b"]
  public_subnets  = ["10.0.1.0/24", "10.0.2.0/24"]

  enable_nat_gateway = false
  single_nat_gateway = true

  tags = {
    Terraform = "true"
    Project   = var.project
  }
}

############################
# 3. ALB
############################

resource "aws_lb" "app_lb" {
  name               = "${var.project}-alb"
  internal           = false
  load_balancer_type = "application"
  subnets            = module.vpc.public_subnets
  security_groups    = [aws_security_group.lb_sg.id]
}

resource "aws_lb_target_group" "flask_tg" {
  name     = "${var.project}-flask-tg"
  port     = var.container_port_flask
  protocol = "HTTP"
  vpc_id   = module.vpc.vpc_id
  target_type = "ip"
}

resource "aws_lb_target_group" "express_tg" {
  name     = "${var.project}-express-tg"
  port     = var.container_port_express
  protocol = "HTTP"
  vpc_id   = module.vpc.vpc_id
  target_type = "ip"
}

resource "aws_lb_listener" "http" {
  load_balancer_arn = aws_lb.app_lb.arn
  port              = 80
  protocol          = "HTTP"

  default_action {
    type             = "fixed-response"
    fixed_response {
      content_type = "text/plain"
      message_body = "Not Found"
      status_code  = "404"
    }
  }
}

resource "aws_lb_listener_rule" "flask_rule" {
  listener_arn = aws_lb_listener.http.arn
  priority     = 100

  action {
    type             = "forward"
    target_group_arn = aws_lb_target_group.flask_tg.arn
  }

  condition {
    path_pattern {
      values = ["/api/*"]
    }
  }
}

resource "aws_lb_listener_rule" "express_rule" {
  listener_arn = aws_lb_listener.http.arn
  priority     = 200

  action {
    type             = "forward"
    target_group_arn = aws_lb_target_group.express_tg.arn
  }

  condition {
    path_pattern {
      values = ["/*"]
    }
  }
}

############################
# 4. ECS Cluster + Fargate Services
############################

resource "aws_ecs_cluster" "main" {
  name = "${var.project}-cluster"
}

resource "aws_iam_role" "ecs_task_execution" {
  name = "${var.project}-task-exec-role"

  assume_role_policy = jsonencode({
    Version = "2012-10-17",
    Statement = [{
      Action = "sts:AssumeRole",
      Effect = "Allow",
      Principal = {
        Service = "ecs-tasks.amazonaws.com"
      }
    }]
  })
}

resource "aws_iam_role_policy_attachment" "ecs_exec_policy" {
  role       = aws_iam_role.ecs_task_execution.name
  policy_arn = "arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy"
}

# Flask task definition
resource "aws_ecs_task_definition" "flask_task" {
  family                   = "flask-task"
  requires_compatibilities = ["FARGATE"]
  cpu                      = "256"
  memory                   = "512"
  network_mode             = "awsvpc"
  execution_role_arn       = aws_iam_role.ecs_task_execution.arn

  container_definitions = jsonencode([
    {
      name      = "flask"
      image     = aws_ecr_repository.flask_repo.repository_url
      portMappings = [{
        containerPort = var.container_port_flask,
        hostPort      = var.container_port_flask
      }]
    }
  ])
}

# Express task definition
resource "aws_ecs_task_definition" "express_task" {
  family                   = "express-task"
  requires_compatibilities = ["FARGATE"]
  cpu                      = "256"
  memory                   = "512"
  network_mode             = "awsvpc"
  execution_role_arn       = aws_iam_role.ecs_task_execution.arn

  container_definitions = jsonencode([
    {
      name      = "express"
      image     = aws_ecr_repository.express_repo.repository_url
      portMappings = [{
        containerPort = var.containe
