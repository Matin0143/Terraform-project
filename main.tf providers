provider "aws" {
  region = var.region
}

# VPC, subnet, and internet gateway
resource "aws_vpc" "main" {
  cidr_block = "10.0.0.0/16"
}

resource "aws_internet_gateway" "gw" {
  vpc_id = aws_vpc.main.id
}

resource "aws_subnet" "public" {
  vpc_id                  = aws_vpc.main.id
  cidr_block              = "10.0.1.0/24"
  map_public_ip_on_launch = true
}

resource "aws_route_table" "rtable" {
  vpc_id = aws_vpc.main.id
}

resource "aws_route" "r" {
  route_table_id         = aws_route_table.rtable.id
  destination_cidr_block = "0.0.0.0/0"
  gateway_id             = aws_internet_gateway.gw.id
}

resource "aws_route_table_association" "a" {
  subnet_id      = aws_subnet.public.id
  route_table_id = aws_route_table.rtable.id
}

# Security group for Flask backend
resource "aws_security_group" "flask_sg" {
  name   = "flask_sg"
  vpc_id = aws_vpc.main.id

  ingress {
    description = "Allow Express frontend access"
    from_port   = 5000
    to_port     = 5000
    protocol    = "tcp"
    cidr_blocks = ["10.0.0.0/16"]
  }

  ingress {
    from_port   = 5000
    to_port     = 5000
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"] # optional for public access
  }

  egress {
    from_port   = 0
    to_port     = 0
    protocol    = "-1"
    cidr_blocks = ["0.0.0.0/0"]
  }
}

# Security group for Express frontend
resource "aws_security_group" "express_sg" {
  name   = "express_sg"
  vpc_id = aws_vpc.main.id

  ingress {
    description = "Public access to Express"
    from_port   = 3000
    to_port     = 3000
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }

  egress {
    from_port   = 0
    to_port     = 0
    protocol    = "-1"
    cidr_blocks = ["0.0.0.0/0"]
  }
}

# Flask EC2 Instance
resource "aws_instance" "flask" {
  ami                    = var.ami_id
  instance_type          = var.instance_type
  subnet_id              = aws_subnet.public.id
  vpc_security_group_ids = [aws_security_group.flask_sg.id]
  key_name               = var.key_name
  user_data              = file("user_data_flask.sh")
  tags = {
    Name = "Flask Backend"
  }
}

# Express EC2 Instance
resource "aws_instance" "express" {
  ami                    = var.ami_id
  instance_type          = var.instance_type
  subnet_id              = aws_subnet.public.id
  vpc_security_group_ids = [aws_security_group.express_sg.id]
  key_name               = var.key_name

  # Replaces placeholder at runtime
  user_data = templatefile("user_data_express.sh", {
    flask_private_ip = aws_instance.flask.private_ip
  })

  tags = {
    Name = "Express Frontend"
  }
}
